---
# Build config for Citrix Netscaler

- name: get password from pmp
  include_tasks: ../../iac.common/tasks/pmp_get_password.yml
  tags:
  - never
  - chAnGe_ServIce_AccOunT_PassWord
 
- name: add service account with new password
  delegate_to: localhost
  uri:
    url: "https://{{ ansible_host }}/nitro/v1/config/systemuser"
    validate_certs: false
    method: POST
    status_code: 201, 409
    return_content: yes
    headers:
      Content-Type: "application/json"
      X-NITRO-USER: "{{ ansible_user }}"
      X-NITRO-PASS: "{{ ansible_password }}"
    body_format: json
    body: >
      {"systemuser":{"username":"{{ item.key }}","password":"{{ item.value.password }}","externalauth":"ENABLED","logging":"ENABLED"}}
  # don't change password for the account that runs the ansible task
  when: item.value.password is defined
  loop: "{{ query('dict', service_accounts|default({})) }}"
  tags:
  - never
  - chAnGe_ServIce_AccOunT_PassWord
  register: response
  #no_log: true

- name: create account_add_status_code variable
  set_fact:
    account_add_status_code: "{{ response.results[0]['status'] }}"
  tags:
  - never
  - chAnGe_ServIce_AccOunT_PassWord
  register: my_output

- name: update password for pre-existing service account
  delegate_to: localhost
  uri:
    url: "https://{{ ansible_host }}/nitro/v1/config/systemuser"
    validate_certs: false
    method: PUT
    status_code: 200
    return_content: yes
    headers:
      X-NITRO-USER: "{{ ansible_user }}"
      X-NITRO-PASS: "{{ ansible_password }}"
    body_format: json
    body: >
      {"systemuser":{"username":"{{ item.key }}","password":"{{ item.value.password }}","externalauth":"ENABLED","logging":"ENABLED"}}
  # don't change password for the account that runs the ansible task
  when: 
    - item.value.password is defined
    - account_add_status_code == "409"
  loop: "{{ query('dict', service_accounts|default({})) }}"
  tags:
  - never
  - chAnGe_ServIce_AccOunT_PassWord
  register: my_output
  #no_log: true

- name: bind new system user to superuser command policy
  delegate_to: localhost
  uri:
    url: "https://{{ ansible_host }}/nitro/v1/config/systemuser_systemcmdpolicy_binding"
    validate_certs: false
    method: PUT
    status_code: 200, 409
    return_content: yes
    headers:
      X-NITRO-USER: "{{ ansible_user }}"
      X-NITRO-PASS: "{{ ansible_password }}"
    body_format: json
    body: >
      {"systemuser_systemcmdpolicy_binding":{"username":"{{ item.key }}","policyname":"superuser","priority":"0"}}
  loop: "{{ query('dict', service_accounts|default({})) }}"
  tags:
  - never
  - chAnGe_ServIce_AccOunT_PassWord
  register: my_output
  #no_log: true
  
- name: Save config
  delegate_to: localhost
  uri:
    url: "https://{{ ansible_host }}/nitro/v1/config/nsconfig?action=save"
    validate_certs: false
    method: POST
    status_code: 200
    headers:
      X-NITRO-USER: "{{ ansible_user }}"
      X-NITRO-PASS: "{{ ansible_password }}"
    body_format: json
    body:
      nsconfig: {}
  register: device_reachable
  until: device_reachable is not failed
  tags:
  - never
  - chAnGe_ServIce_AccOunT_PassWord
  #no_log: true

- name: switch to the device local login user
  set_fact:
    ansible_user: "{{ item.key }}"
    ansible_password: "{{ item.value.password }}"
  when: item.value.password is defined
  loop: "{{ query('dict', service_accounts|default({})) }}"
  tags:
  - never
  - chAnGe_ServIce_AccOunT_PassWord
  register: my_output
  #no_log: true

- name: confirm access as device local login user with new password
  delegate_to: localhost
  uri:
    url: "https://{{ ansible_host }}/nitro/v1/config/systemsession"
    validate_certs: false
    method: GET
    status_code: 200
    return_content: yes
    headers:
      X-NITRO-USER: "{{ ansible_user }}"
      X-NITRO-PASS: "{{ ansible_password }}"
    body_format: json
  tags:
  - never
  - chAnGe_ServIce_AccOunT_PassWord
  register: result
  #no_log: true

- name: device session confirmation of new password access
  debug:
    msg: "{{ result }}"
  tags:
  - never
  - chAnGe_ServIce_AccOunT_PassWord

