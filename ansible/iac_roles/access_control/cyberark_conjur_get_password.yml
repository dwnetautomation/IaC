---
- name: get caconjur token
  delegate_to: localhost
  uri:
    url: "{{ caconjur_settings.httpshost }}authn/{{ caconjur_settings.instance }}/host%2F{{ caconjur_settings.conjurhost }}/authenticate"
    headers:
      Accept-Encoding: base64
      Content-Type: application/json
    method: POST
    body: "{{ caconjur_settings.apikey }}"
    body_format: json
    return_content: yes
  when: service_accounts is defined and caconjur_settings is defined and item.value.cyberark_safe is defined
  loop: "{{ query('dict', service_accounts|default({})) }}"
  register: data
  tags:
  - never
  - chAnGe_ServIce_AccOunT_PassWord
  no_log: true

- name: set token var
  delegate_to: localhost
  set_fact:
    token: 'token="{{ data.results[0].content }}"'
  tags:
  - never
  - chAnGe_ServIce_AccOunT_PassWord
  no_log: true

- name: get password from caconjur
  delegate_to: localhost
  vars:
    cyberark_path: "Vault/Infrastructure_Automation/{{ item.value.cyberark_safe }}/{{ item.key }}/password"
  uri:
    url: "{{ caconjur_settings.httpshost }}secrets/neustar/variable/{{ cyberark_path }}"
    headers:
      Content-Type: application/json
      Authorization: Token {{ token }}
    return_content: yes
  when: service_accounts is defined and caconjur_settings is defined and item.value.cyberark_safe is defined
  loop: "{{ query('dict', service_accounts|default({})) }}"
  register: cyberark_output
  tags:
  - never
  - chAnGe_ServIce_AccOunT_PassWord
  no_log: true

- name: update service account variable
  set_fact:
    service_accounts: "{{ service_accounts | combine({sa_out.item.key: {'password': sa_out.content}}) }}"
  loop: "{{ cyberark_output.results }}"
  loop_control:
    loop_var: sa_out
  when: service_accounts is defined and sa_out.failed is defined and not sa_out.failed and sa_out.status is defined and sa_out.status==200
  tags:
  - never
  - chAnGe_ServIce_AccOunT_PassWord
  no_log: true

